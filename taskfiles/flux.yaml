---
version: "3"

vars:
  KUBECONFIG_FOLDER: ~/.kube
  FLUX_INSTANCE_PACKAGE: oci://ghcr.io/stuttgart-things/kcl-flux-instance
  FLUX_INSTANCE_VERSION: "0.2.0"
  DEFAULT_FLUX_VERSION: "2.4"
  DEFAULT_NAMESPACE: flux-system
  DEFAULT_CONCURRENT: "10"
  DEFAULT_REQUEUE_DEPENDENCY: "5s"

tasks:
  render:
    desc: Render FluxInstance CR with interactive configuration
    cmds:
      - |
        echo "🚀 FluxInstance Configuration"
        echo "================================"
        echo ""

        # Fixed name - always flux
        NAME="flux"

        # Basic Configuration
        NAMESPACE=$(gum input --value "{{.DEFAULT_NAMESPACE}}" --prompt "Namespace? " --placeholder "{{.DEFAULT_NAMESPACE}}")

        # Secret Rendering - Ask first to set up references
        echo ""
        gum style --border double --padding "1 2" --border-foreground 212 "Kubernetes Secrets"
        RENDER_SECRETS=$(gum choose --header "Render Kubernetes Secrets?" "false" "true")

        # Git Secret Configuration
        if [ "${RENDER_SECRETS}" = "true" ]; then
          echo ""
          gum style --foreground 212 "📝 Git Authentication Secret"
          GIT_PULL_SECRET=$(gum input --value "git-token-auth" --prompt "Git secret name? " --placeholder "git-token-auth")
          GIT_USERNAME=$(gum input --prompt "Git username? " --placeholder "github-user")
          GIT_PASSWORD=$(gum input --password --prompt "Git password/token? " --placeholder "ghp_...")
        else
          GIT_PULL_SECRET=$(gum input --value "git-token-auth" --prompt "Git secret name (existing)? " --placeholder "git-token-auth")
        fi

        # SOPS Configuration
        echo ""
        gum style --border double --padding "1 2" --border-foreground 212 "SOPS Configuration"
        SOPS_ENABLED=$(gum choose --header "Enable SOPS decryption?" "true" "false")

        if [ "${SOPS_ENABLED}" = "true" ]; then
          if [ "${RENDER_SECRETS}" = "true" ]; then
            echo ""
            gum style --foreground 212 "🔐 SOPS Decryption Secret"
            SOPS_SECRET=$(gum input --value "sops-age" --prompt "SOPS secret name? " --placeholder "sops-age")
            SOPS_AGE_KEY=$(gum input --password --prompt "SOPS AGE private key? " --placeholder "AGE-SECRET-KEY-1...")
          else
            SOPS_SECRET=$(gum input --value "sops-age" --prompt "SOPS secret name (existing)? " --placeholder "sops-age")
          fi
        fi

        # Distribution Settings
        echo ""
        gum style --border double --padding "1 2" --border-foreground 212 "Distribution Settings"
        VERSION=$(gum input --value "{{.DEFAULT_FLUX_VERSION}}" --prompt "Flux version? " --placeholder "{{.DEFAULT_FLUX_VERSION}}")
        REGISTRY="ghcr.io/fluxcd"

        # Git Sync Configuration
        echo ""
        gum style --border double --padding "1 2" --border-foreground 212 "Git Sync Configuration"

        # Ask for cluster name first
        CLUSTER_NAME=$(gum input --value "production" --prompt "Cluster name? " --placeholder "production")

        GIT_URL=$(gum input --value "https://github.com/stuttgart-things/stuttgart-things.git" --prompt "Git repository URL? " --placeholder "https://github.com/stuttgart-things/stuttgart-things.git")

        if [ -z "${GIT_URL}" ]; then
          echo "❌ Git URL is required!"
          exit 1
        fi

        GIT_REF=$(gum input --value "refs/heads/main" --prompt "Git reference? " --placeholder "refs/heads/main")
        GIT_PATH=$(gum input --value "clusters/${CLUSTER_NAME}" --prompt "Path in repository? " --placeholder "clusters/${CLUSTER_NAME}")

        # Performance Settings
        echo ""
        gum style --border double --padding "1 2" --border-foreground 212 "Performance Settings"
        CONCURRENT=$(gum input --value "{{.DEFAULT_CONCURRENT}}" --prompt "Concurrent reconciliations? " --placeholder "{{.DEFAULT_CONCURRENT}}")
        REQUEUE_DEPENDENCY=$(gum input --value "{{.DEFAULT_REQUEUE_DEPENDENCY}}" --prompt "Requeue dependency interval? " --placeholder "{{.DEFAULT_REQUEUE_DEPENDENCY}}")

        # Cluster Settings
        echo ""
        gum style --border double --padding "1 2" --border-foreground 212 "Cluster Settings"
        MULTITENANT=$(gum choose --header "Enable multitenant mode?" "false" "true")
        NETWORK_POLICY=$(gum choose --header "Enable NetworkPolicy?" "true" "false")
        DOMAIN=$(gum input --value "cluster.local" --prompt "Cluster domain? " --placeholder "cluster.local")

        # Reconciliation Settings
        echo ""
        gum style --border double --padding "1 2" --border-foreground 212 "Reconciliation Settings"
        RECONCILE_EVERY=$(gum input --value "1h" --prompt "Reconcile interval? " --placeholder "1h")
        RECONCILE_TIMEOUT=$(gum input --value "5m" --prompt "Reconcile timeout? " --placeholder "5m")

        # Summary
        echo ""
        gum style --border double --padding "1 2" --border-foreground 57 "Configuration Summary"
        echo "Name:                ${NAME}"
        echo "Namespace:           ${NAMESPACE}"
        echo "Render Secrets:      ${RENDER_SECRETS}"
        echo "Git Secret:          ${GIT_PULL_SECRET}"
        if [ "${SOPS_ENABLED}" = "true" ]; then
          echo "SOPS Secret:         ${SOPS_SECRET}"
        fi
        echo "Cluster:             ${CLUSTER_NAME}"
        echo "Git URL:             ${GIT_URL}"
        echo "Git Path:            ${GIT_PATH}"
        echo "Version:             ${VERSION}"
        echo "Concurrent:          ${CONCURRENT}"
        echo "Multitenant:         ${MULTITENANT}"
        echo "Network Policy:      ${NETWORK_POLICY}"
        echo ""

        gum confirm "Proceed with rendering FluxInstance?" || exit 0

        # Build KCL command
        echo ""
        echo "📦 Rendering FluxInstance from OCI package..."

        KCL_CMD="kcl run {{.FLUX_INSTANCE_PACKAGE}} --tag {{.FLUX_INSTANCE_VERSION}}"
        KCL_CMD="${KCL_CMD} -D name=${NAME}"
        KCL_CMD="${KCL_CMD} -D namespace=${NAMESPACE}"
        KCL_CMD="${KCL_CMD} -D version=${VERSION}"
        KCL_CMD="${KCL_CMD} -D registry=${REGISTRY}"
        KCL_CMD="${KCL_CMD} -D gitUrl=${GIT_URL}"
        KCL_CMD="${KCL_CMD} -D gitRef=${GIT_REF}"
        KCL_CMD="${KCL_CMD} -D gitPath=${GIT_PATH}"
        KCL_CMD="${KCL_CMD} -D gitPullSecret=${GIT_PULL_SECRET}"
        KCL_CMD="${KCL_CMD} -D sopsEnabled=${SOPS_ENABLED}"

        if [ "${SOPS_ENABLED}" = "true" ]; then
          KCL_CMD="${KCL_CMD} -D sopsSecretName=${SOPS_SECRET}"
        fi

        KCL_CMD="${KCL_CMD} -D concurrent=${CONCURRENT}"
        KCL_CMD="${KCL_CMD} -D requeueDependency=${REQUEUE_DEPENDENCY}"
        KCL_CMD="${KCL_CMD} -D multitenant=${MULTITENANT}"
        KCL_CMD="${KCL_CMD} -D networkPolicy=${NETWORK_POLICY}"
        KCL_CMD="${KCL_CMD} -D domain=${DOMAIN}"
        KCL_CMD="${KCL_CMD} -D reconcileEvery=${RECONCILE_EVERY}"
        KCL_CMD="${KCL_CMD} -D reconcileTimeout=${RECONCILE_TIMEOUT}"

        # Add secret rendering parameters
        if [ "${RENDER_SECRETS}" = "true" ]; then
          KCL_CMD="${KCL_CMD} -D renderSecrets=true"
          KCL_CMD="${KCL_CMD} -D gitUsername=${GIT_USERNAME}"
          KCL_CMD="${KCL_CMD} -D gitPassword=${GIT_PASSWORD}"

          if [ "${SOPS_ENABLED}" = "true" ] && [ -n "${SOPS_AGE_KEY}" ]; then
            KCL_CMD="${KCL_CMD} -D sopsAgeKey=${SOPS_AGE_KEY}"
          fi
        fi

        # Execute KCL and store output
        RENDERED_OUTPUT=$(${KCL_CMD} | grep -A 1000 "^items:")

        # Show preview
        echo ""
        gum style --border double --padding "1 2" --border-foreground 212 "📄 Preview"
        echo "${RENDERED_OUTPUT}"
        echo ""

        # Ask what to do next
        ACTION=$(gum choose --header "What do you want to do?" "Apply to cluster" "Save to file" "Cancel")

        case "${ACTION}" in
          "Apply to cluster")
            echo ""
            gum style --border double --padding "1 2" --border-foreground 212 "🎯 Apply to Cluster"

            # Select kubeconfig
            KUBECONFIG_FILE=$(find {{.KUBECONFIG_FOLDER}} -type f | gum choose --header "Select kubeconfig")
            if [ -z "${KUBECONFIG_FILE}" ]; then
              echo "❌ No kubeconfig selected"
              exit 1
            fi

            export KUBECONFIG="${KUBECONFIG_FILE}"
            echo "Cluster: $(kubectl cluster-info | head -1)"
            echo ""

            # Check if flux-system namespace exists
            if ! kubectl get namespace flux-system >/dev/null 2>&1; then
              echo "⚠️  flux-system namespace does not exist"
              if gum confirm "Create flux-system namespace?"; then
                kubectl create namespace flux-system
                echo "✅ Created flux-system namespace"
                echo ""
              fi
            fi

            if gum confirm "Apply FluxInstance to cluster?"; then
              echo "${RENDERED_OUTPUT}" | kubectl apply -f -

              echo ""
              gum style --border double --padding "1 2" --border-foreground 57 "✅ FluxInstance applied!"
              echo ""

              echo "Checking FluxInstance status..."
              kubectl get fluxinstance -n ${NAMESPACE} ${NAME} || true
              echo ""
              echo "Monitor Flux deployment with:"
              echo "  kubectl get pods -n ${NAMESPACE} -w"
            else
              echo "❌ Apply cancelled"
            fi
            ;;

          "Save to file")
            OUTPUT_FILE=$(gum input --value "/tmp/flux-instance.yaml" --prompt "Output file path? " --placeholder "/tmp/flux-instance.yaml")
            echo "${RENDERED_OUTPUT}" > "${OUTPUT_FILE}"

            echo ""
            gum style --border double --padding "1 2" --border-foreground 57 "✅ FluxInstance saved successfully!"
            echo "Output saved to: ${OUTPUT_FILE}"
            ;;

          "Cancel")
            echo ""
            gum style --border double --padding "1 2" --border-foreground 57 "✅ FluxInstance rendered (not saved)"
            ;;
        esac
        echo ""

  delete:
    desc: Delete FluxInstance from cluster
    vars:
      EXPORT_CMD_KUBECONFIG:
        sh: |
          KUBECONFIG_FILE=$(find {{.KUBECONFIG_FOLDER}} -type f | gum choose --header "Select kubeconfig")
          echo "export KUBECONFIG=${KUBECONFIG_FILE}"
    cmds:
      - |
        {{ .EXPORT_CMD_KUBECONFIG }}

        echo "🎯 Selected cluster:"
        kubectl cluster-info | head -1
        echo ""

        # List FluxInstances
        echo "Available FluxInstances:"
        kubectl get fluxinstance --all-namespaces
        echo ""

        # Select namespace
        NAMESPACE=$(kubectl get fluxinstance --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{"\n"}{end}' | sort -u | gum choose --header "Select namespace")

        if [ -z "${NAMESPACE}" ]; then
          echo "❌ No namespace selected"
          exit 1
        fi

        # Select FluxInstance
        FLUX_NAME=$(kubectl get fluxinstance -n "${NAMESPACE}" -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | gum choose --header "Select FluxInstance to delete")

        if [ -z "${FLUX_NAME}" ]; then
          echo "❌ No FluxInstance selected"
          exit 1
        fi

        echo ""
        gum style --border double --padding "1 2" --border-foreground 196 "⚠️  Deletion Confirmation"
        echo "This will delete:"
        echo "  FluxInstance: ${FLUX_NAME}"
        echo "  Namespace:    ${NAMESPACE}"
        echo "  Cluster:      $(kubectl config current-context)"
        echo ""

        if gum confirm "Are you sure you want to delete this FluxInstance?"; then
          kubectl delete fluxinstance -n "${NAMESPACE}" "${FLUX_NAME}"
          echo ""
          gum style --border double --padding "1 2" --border-foreground 57 "✅ FluxInstance deleted"
        else
          echo "❌ Deletion cancelled"
        fi

  status:
    desc: Check FluxInstance status in cluster
    vars:
      EXPORT_CMD_KUBECONFIG:
        sh: |
          KUBECONFIG_FILE=$(find {{.KUBECONFIG_FOLDER}} -type f | gum choose --header "Select kubeconfig")
          echo "export KUBECONFIG=${KUBECONFIG_FILE}"
    cmds:
      - |
        {{ .EXPORT_CMD_KUBECONFIG }}

        echo "🎯 Cluster: $(kubectl config current-context)"
        echo ""

        gum style --border double --padding "1 2" --border-foreground 212 "FluxInstances"
        kubectl get fluxinstance --all-namespaces

        echo ""
        gum style --border double --padding "1 2" --border-foreground 212 "Flux Pods"
        kubectl get pods -n flux-system 2>/dev/null || echo "No flux-system namespace found"

        echo ""
        if gum confirm "Show detailed FluxInstance status?"; then
          NAMESPACE=$(kubectl get fluxinstance --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{"\n"}{end}' | sort -u | gum choose --header "Select namespace")

          if [ -n "${NAMESPACE}" ]; then
            FLUX_NAME=$(kubectl get fluxinstance -n "${NAMESPACE}" -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | gum choose --header "Select FluxInstance")

            if [ -n "${FLUX_NAME}" ]; then
              echo ""
              gum style --border double --padding "1 2" --border-foreground 57 "FluxInstance Details"
              kubectl describe fluxinstance -n "${NAMESPACE}" "${FLUX_NAME}"
            fi
          fi
        fi

  default:
    desc: Select a task to run
    cmds:
      - |
        task=$(yq e '.tasks | keys' flux.yaml  | sed 's/^- //' | gum choose)
        task --taskfile flux.yaml ${task}

  default:
    desc: Select a task to run
    cmds:
      - |
        task=$(yq e '.tasks | keys' flux.yaml  | sed 's/^- //' | gum choose)
        task --taskfile flux.yaml ${task}