---
version: 3
vars:
  DATE:
    sh: date +"%y.%m%d.%H%M"
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi

tasks:
  run-terraform-shell:
    cmds:
      - |
        MOUNT=$(echo "{{.directory | join "\n"}}" | gum choose)
        dagger -c '
          container |
            from cgr.dev/chainguard/wolfi-base |
            with-exec apk add curl git bash wget terraform kubectl |
            with-mounted-directory "'"$MOUNT"'" "'"$MOUNT"'" |
            with-mounted-file /root/.kube/config ../../../.kube/keycloak-cluster |
            terminal
        '
    vars:
      directory:
        - keycloak

  destroy-kind-cluster:
    desc: Destroy a KinD cluster
    cmds:
      - |
        CLUSTERS=$(kind get clusters)
        if [ -z "$CLUSTERS" ]; then
          echo "No KinD clusters found."
          exit 0
        fi

        CLUSTER_NAME=$(echo "$CLUSTERS" | gum choose)
        echo "You chose: $CLUSTER_NAME"

        if gum confirm "Do you really want to delete cluster $CLUSTER_NAME?"; then
          kind delete cluster --name "$CLUSTER_NAME"
          echo "Cluster $CLUSTER_NAME deleted."
        else
          echo "Aborted."
        fi

  create-kind-cluster:
    desc: Create a new KinD cluster
    cmds:
      - |
        PROFILE=$(echo "{{.profiles | join "\n"}}" | gum choose)
        echo "You chose: $PROFILE"

        mkdir -p {{ .KUBECONFIG_PATH }} || true

        CLUSTER_NAME=$(basename "$PROFILE" .yaml)

        if kind get clusters | grep -q "^$CLUSTER_NAME$"; then
          echo "Cluster $CLUSTER_NAME already exists."
          if gum confirm "Do you want to delete and recreate it?"; then
            kind delete cluster --name "$CLUSTER_NAME"
          else
            echo "Aborting."
            exit 0
          fi
        fi

        kind create cluster \
          --name "$CLUSTER_NAME" \
          --config "$PROFILE" \
          --kubeconfig {{ .KUBECONFIG_PATH }}/"$CLUSTER_NAME"
    vars:
      profiles:
        - keycloak/keycloak-cluster.yaml
        - kargo/kargo-cluster.yaml
        - gateway-api/gateway-api-cluster.yaml
      KUBECONFIG_PATH: ~/.kube

  create-dagger:
    desc: Create new dagger module
    cmds:
      - dagger init --sdk={{ .SDK }} --source=./.dagger/{{ .MODULE_NAME }} --name={{ .MODULE_NAME }}
      - jq '.source = "."' dagger.json > tmp.json && mv tmp.json dagger.json
      - mv dagger.json ./.dagger/{{ .MODULE_NAME }}/dagger.json
    vars:
      MODULE_NAME:
        sh: gum input --placeholder "Module name"
      SDK:
        sh: gum choose "go" "python"

  commit:
    desc: Commit + push code into branch
    deps:
      - check
    cmds:
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - git status
      - |
        git add *
        git status
        if [[ -n $(git status --porcelain) ]]; then
          echo "Review the changes above."
          gum confirm "Do you want to commit these changes?" || exit 0

          echo "ENTER COMMIT MESSAGE"
          COMMIT_MESSAGE=$(gum choose "CUSTOM MESSAGE" "feat: {{ .BRANCH }}" "fix: {{ .BRANCH }}" "BREAKING CHANGE: {{ .BRANCH }}")

          if [ "$COMMIT_MESSAGE" == "CUSTOM MESSAGE" ]; then
            CHANGED_FILES=$(git status --short | awk '{print $2}' | tr '\n' ' ')
            COMMIT_MESSAGE=$(gum input --placeholder "Commit message" --value "Changed: $CHANGED_FILES")
          fi

          git commit --allow-empty -a -m "$COMMIT_MESSAGE"
        else
          echo "No changes to commit."
        fi
      - git push origin -u {{ .BRANCH }}

  pr:
    desc: Create pull request into main
    cmds:
      - task: commit
      - gh pr create -t "{{ .BRANCH }}" -b "{{ .BRANCH }} branch into main"
      - sleep 2s
      # - gh pr checks $(gh pr list | grep "^[^#;]" | awk '{print $1}') --watch
      - gh pr merge $(gh pr list | grep "^[^#;]" | grep '{{ .BRANCH }}' | awk '{print $1}') --auto --rebase --delete-branch
      - git checkout main && git pull

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  do:
    desc: Select a task to run
    cmds:
      - |
        task=$(yq e '.tasks | keys' Taskfile.yaml | sed 's/^- //' | gum choose)
        task ${task}

  check:
    desc: "Run pre-commit hooks"
    cmds:
      - pre-commit run -a

  run-pre-commit-hook:
    deps:
      - check
    desc: "Run the pre-commit hook script to replace .example.com with .example.com"
    cmds:
      - |
        # Find all YAML files in the repository recursively, excluding Taskfile.yaml
        files=$(find . -type f \( -name "*.yaml" -o -name "*.yml" -o -name "*.yml" -o -name "*.md" \) ! -name "Taskfile.yaml")

        # Loop through each file
        for file in $files; do
          # Skip binary files
          if file "$file" | grep -q "text"; then
            # Replace the string and update the file
            sed -i 's/\.sva\.de/\.example\.com/g' "$file"
          fi
        done

        # Add all modified YAML files back to staging
        git add $(git ls-files --modified | grep -E '\.ya?ml$')

        exit 0
    silent: false
